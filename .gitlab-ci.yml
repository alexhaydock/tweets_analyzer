stages:
  - .pre
  - build
  - test

# Linter
docker-lint:
  image: projectatomic/dockerfile-lint
  stage: .pre
  script:
    - dockerfile_lint -f Dockerfile

# Docker buildx for multiplatform
buildx:
  image: docker:stable-git
  stage: .pre
  variables:
    GIT_STRATEGY: none
  artifacts:
    paths:
      - buildx
    expire_in: 1 hour
  services:
    - docker:stable-dind
  script:
    - export DOCKER_BUILDKIT=1
    - git clone git://github.com/docker/buildx ./docker-buildx
    - docker build --platform=local -o . ./docker-buildx

# Run build
build:
  image: docker:stable
  stage: build
  services:
    - name: docker:stable-dind
      command: ["--experimental"]
  variables:
    GENERIC_TAG: "$CI_REGISTRY_IMAGE"
    # We want to set something more specific than ":latest" as
    # the tag, mostly for Klar's purposes in the test stage.
    SPECIFIC_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    BUILD_ARCHES: "linux/amd64,linux/arm64,linux/arm/v7"
  retry: 2
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker buildx create --use --name mybuilder
    - docker buildx build --push --platform $BUILD_ARCHES -t $GENERIC_TAG -t $SPECIFIC_TAG .

# Klar container vuln/security scanning
# See: https://docs.gitlab.com/ce/user/application_security/container_scanning/
include:
  - template: Container-Scanning.gitlab-ci.yml

# Use "fetch" as the Git strategy for the Clair/Klar test step.
# This gives the vuln scanner access to the Dockerfile so it can
# provide us with remediation steps if it does find any issues.
container_scanning:
  variables:
    CI_APPLICATION_REPOSITORY: "$CI_REGISTRY_IMAGE"
    CI_APPLICATION_TAG: "$CI_COMMIT_SHA"
    GIT_STRATEGY: fetch